"{\"data\":\"{\\\"color\\\":-10701022,\\\"id\\\":\\\"10\\\",\\\"nextBlock\\\":-1,\\\"opCode\\\":\\\"addSourceDirectly\\\",\\\"parameters\\\":[\\\"_view.setBackground(Drawables.getSelectableDrawableFor(Color.parseColor(_c)));\\\\n_view.setClickable(true);\\\\n\\\\n}\\\\n\\\\npublic static class Drawables {\\\\n    public static android.graphics.drawable.Drawable getSelectableDrawableFor(int color) {\\\\n        if (Build.VERSION.SDK_INT \\\\u003c Build.VERSION_CODES.LOLLIPOP) {\\\\n            android.graphics.drawable.StateListDrawable stateListDrawable \\\\u003d new android.graphics.drawable.StateListDrawable();\\\\n            stateListDrawable.addState(\\\\n                new int[]{android.R.attr.state_pressed},\\\\n                new android.graphics.drawable.ColorDrawable(Color.parseColor(\\\\\\\"#ffffff\\\\\\\"))\\\\n            );\\\\n            stateListDrawable.addState(\\\\n                new int[]{android.R.attr.state_focused},\\\\n                new android.graphics.drawable.ColorDrawable(Color.parseColor(\\\\\\\"#00ffffff\\\\\\\"))\\\\n            );\\\\n            stateListDrawable.addState(\\\\n                new int[]{},\\\\n                new android.graphics.drawable.ColorDrawable(Color.parseColor(\\\\\\\"#00ffffff\\\\\\\"))\\\\n            );\\\\n            return stateListDrawable;\\\\n        } else {\\\\n            android.content.res.ColorStateList pressedColor \\\\u003d android.content.res.ColorStateList.valueOf(color);\\\\n            android.graphics.drawable.ColorDrawable defaultColor \\\\u003d new android.graphics.drawable.ColorDrawable(Color.parseColor(\\\\\\\"#00ffffff\\\\\\\"));\\\\n            \\\\nandroid.graphics.drawable.Drawable rippleColor \\\\u003d getRippleColor(color);\\\\n            return new android.graphics.drawable.RippleDrawable(\\\\n                pressedColor,\\\\n                defaultColor,\\\\n                rippleColor\\\\n            );\\\\n        }\\\\n    }\\\\n\\\\n    private static android.graphics.drawable.Drawable getRippleColor(int color) {\\\\n        float[] outerRadii \\\\u003d new float[8];\\\\n        Arrays.fill(outerRadii, 0);\\\\n        android.graphics.drawable.shapes.RoundRectShape r \\\\u003d new android.graphics.drawable.shapes.RoundRectShape(outerRadii, null, null);\\\\n        \\\\nandroid.graphics.drawable.ShapeDrawable shapeDrawable \\\\u003d new \\\\nandroid.graphics.drawable.ShapeDrawable(r);\\\\n        shapeDrawable.getPaint().setColor(color);\\\\n        return shapeDrawable;\\\\n    }\\\\n \\\\n    private static int lightenOrDarken(int color, double fraction) {\\\\n        if (canLighten(color, fraction)) {\\\\n            return lighten(color, fraction);\\\\n        } else {\\\\n            return darken(color, fraction);\\\\n        }\\\\n    }\\\\n \\\\n    private static int lighten(int color, double fraction) {\\\\n        int red \\\\u003d Color.red(color);\\\\n        int green \\\\u003d Color.green(color);\\\\n        int blue \\\\u003d Color.blue(color);\\\\n        red \\\\u003d lightenColor(red, fraction);\\\\n        green \\\\u003d lightenColor(green, fraction);\\\\n        blue \\\\u003d lightenColor(blue, fraction);\\\\n        int alpha \\\\u003d Color.alpha(color);\\\\n        return Color.argb(alpha, red, green, blue);\\\\n    }\\\\n \\\\n    private static int darken(int color, double fraction) {\\\\n        int red \\\\u003d Color.red(color);\\\\n        int green \\\\u003d Color.green(color);\\\\n        int blue \\\\u003d Color.blue(color);\\\\n        red \\\\u003d darkenColor(red, fraction);\\\\n        green \\\\u003d darkenColor(green, fraction);\\\\n        blue \\\\u003d darkenColor(blue, fraction);\\\\n        int alpha \\\\u003d Color.alpha(color);\\\\n \\\\n        return Color.argb(alpha, red, green, blue);\\\\n    }\\\\n \\\\n    private static boolean canLighten(int color, double fraction) {\\\\n        int red \\\\u003d Color.red(color);\\\\n        int green \\\\u003d Color.green(color);\\\\n        int blue \\\\u003d Color.blue(color);\\\\n        return canLightenComponent(red, fraction)\\\\n            \\\\u0026\\\\u0026 canLightenComponent(green, fraction)\\\\n            \\\\u0026\\\\u0026 canLightenComponent(blue, fraction);\\\\n    }\\\\n \\\\n    private static boolean canLightenComponent(int colorComponent, double fraction) {\\\\n        int red \\\\u003d Color.red(colorComponent);\\\\n        int green \\\\u003d Color.green(colorComponent);\\\\n        int blue \\\\u003d Color.blue(colorComponent);\\\\n        return red + (red * fraction) \\\\u003c 255\\\\n            \\\\u0026\\\\u0026 green + (green * fraction) \\\\u003c 255\\\\n            \\\\u0026\\\\u0026 blue + (blue * fraction) \\\\u003c 255;\\\\n    }\\\\n \\\\n    private static int darkenColor(int color, double fraction) {\\\\n        return (int) Math.max(color - (color * fraction), 0);\\\\n    }\\\\n \\\\n    private static int lightenColor(int color, double fraction) {\\\\n        return (int) Math.min(color + (color * fraction), 255);\\\\n    }\\\\n}\\\\npublic static class CircleDrawables {\\\\n    public static android.graphics.drawable.Drawable getSelectableDrawableFor(int color) {\\\\n        if (Build.VERSION.SDK_INT \\\\u003c Build.VERSION_CODES.LOLLIPOP) {\\\\n            android.graphics.drawable.StateListDrawable stateListDrawable \\\\u003d new android.graphics.drawable.StateListDrawable();\\\\n            stateListDrawable.addState(\\\\n                new int[]{android.R.attr.state_pressed},\\\\n                new android.graphics.drawable.ColorDrawable(Color.parseColor(\\\\\\\"#ffffff\\\\\\\"))\\\\n            );\\\\n            stateListDrawable.addState(\\\\n                new int[]{android.R.attr.state_focused},\\\\n                new android.graphics.drawable.ColorDrawable(Color.parseColor(\\\\\\\"#00ffffff\\\\\\\"))\\\\n            );\\\\n            stateListDrawable.addState(\\\\n                new int[]{},\\\\n                new android.graphics.drawable.ColorDrawable(Color.parseColor(\\\\\\\"#00ffffff\\\\\\\"))\\\\n            );\\\\n            return stateListDrawable;\\\\n        } else {\\\\n            android.content.res.ColorStateList pressedColor \\\\u003d android.content.res.ColorStateList.valueOf(color);\\\\n            android.graphics.drawable.ColorDrawable defaultColor \\\\u003d new android.graphics.drawable.ColorDrawable(Color.parseColor(\\\\\\\"#00ffffff\\\\\\\"));\\\\n            \\\\nandroid.graphics.drawable.Drawable rippleColor \\\\u003d getRippleColor(color);\\\\n            return new android.graphics.drawable.RippleDrawable(\\\\n                pressedColor,\\\\n                defaultColor,\\\\n                rippleColor\\\\n            );\\\\n        }\\\\n    }\\\\n\\\\n    private static android.graphics.drawable.Drawable getRippleColor(int color) {\\\\n        float[] outerRadii \\\\u003d new float[180];\\\\n        Arrays.fill(outerRadii, 80);\\\\n        android.graphics.drawable.shapes.RoundRectShape r \\\\u003d new android.graphics.drawable.shapes.RoundRectShape(outerRadii, null, null);\\\\n        \\\\nandroid.graphics.drawable.ShapeDrawable shapeDrawable \\\\u003d new \\\\nandroid.graphics.drawable.ShapeDrawable(r);\\\\n        shapeDrawable.getPaint().setColor(color);\\\\n        return shapeDrawable;\\\\n    }\\\\n \\\\n    private static int lightenOrDarken(int color, double fraction) {\\\\n        if (canLighten(color, fraction)) {\\\\n            return lighten(color, fraction);\\\\n        } else {\\\\n            return darken(color, fraction);\\\\n        }\\\\n    }\\\\n \\\\n    private static int lighten(int color, double fraction) {\\\\n        int red \\\\u003d Color.red(color);\\\\n        int green \\\\u003d Color.green(color);\\\\n        int blue \\\\u003d Color.blue(color);\\\\n        red \\\\u003d lightenColor(red, fraction);\\\\n        green \\\\u003d lightenColor(green, fraction);\\\\n        blue \\\\u003d lightenColor(blue, fraction);\\\\n        int alpha \\\\u003d Color.alpha(color);\\\\n        return Color.argb(alpha, red, green, blue);\\\\n    }\\\\n \\\\n    private static int darken(int color, double fraction) {\\\\n        int red \\\\u003d Color.red(color);\\\\n        int green \\\\u003d Color.green(color);\\\\n        int blue \\\\u003d Color.blue(color);\\\\n        red \\\\u003d darkenColor(red, fraction);\\\\n        green \\\\u003d darkenColor(green, fraction);\\\\n        blue \\\\u003d darkenColor(blue, fraction);\\\\n        int alpha \\\\u003d Color.alpha(color);\\\\n \\\\n        return Color.argb(alpha, red, green, blue);\\\\n    }\\\\n \\\\n    private static boolean canLighten(int color, double fraction) {\\\\n        int red \\\\u003d Color.red(color);\\\\n        int green \\\\u003d Color.green(color);\\\\n        int blue \\\\u003d Color.blue(color);\\\\n        return canLightenComponent(red, fraction)\\\\n            \\\\u0026\\\\u0026 canLightenComponent(green, fraction)\\\\n            \\\\u0026\\\\u0026 canLightenComponent(blue, fraction);\\\\n    }\\\\n \\\\n    private static boolean canLightenComponent(int colorComponent, double fraction) {\\\\n        int red \\\\u003d Color.red(colorComponent);\\\\n        int green \\\\u003d Color.green(colorComponent);\\\\n        int blue \\\\u003d Color.blue(colorComponent);\\\\n        return red + (red * fraction) \\\\u003c 255\\\\n            \\\\u0026\\\\u0026 green + (green * fraction) \\\\u003c 255\\\\n            \\\\u0026\\\\u0026 blue + (blue * fraction) \\\\u003c 255;\\\\n    }\\\\n \\\\n    private static int darkenColor(int color, double fraction) {\\\\n        return (int) Math.max(color - (color * fraction), 0);\\\\n    }\\\\n \\\\n    private static int lightenColor(int color, double fraction) {\\\\n        return (int) Math.min(color + (color * fraction), 255);\\\\n}\\\\n}\\\\n\\\\npublic void drawableclass() {\\\"],\\\"spec\\\":\\\"add source directly %s.inputOnly\\\",\\\"subStack1\\\":-1,\\\"subStack2\\\":-1,\\\"type\\\":\\\" \\\",\\\"typeName\\\":\\\"\\\"}\\n\",\"name\":\"Click effect\",\"reserved1\":\"click_effect %m.view.view color %s.c\"}"
